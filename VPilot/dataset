#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from deepgtav.messages import Start, Stop, Dataset, frame2numpy, Scenario
from deepgtav.client import Client

import argparse
import time
import cv2
from datetime import datetime
import shutil
import pandas as pd
import os


steering_list = []
image_list = []
throttle_list = []

def CropImage(image):
    return image[100:220, 0:320]

# Stores a dataset file with data coming from DeepGTAV
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=None)
    parser.add_argument('-l', '--host', default='localhost', help='The IP where DeepGTAV is running')
    parser.add_argument('-p', '--port', default=8000, help='The port where DeepGTAV is running')
    parser.add_argument('-d', '--dataset_path', default='dataset.pz', help='Place to store the dataset')
    parser.add_argument(
        'image_folder',
        type=str,
        nargs='?',
        default='',
        help='Path to image folder. This is where the images from the run will be saved.'
	)	
    args = parser.parse_args()
    if args.image_folder != '':
        print("Creating image folder at {}".format(args.image_folder))
        if not os.path.exists(args.image_folder):
            os.makedirs(args.image_folder)
        else:
            shutil.rmtree(args.image_folder)
            os.makedirs(args.image_folder)
        print("RECORDING THIS RUN ...")
    else:
        print("NOT RECORDING THIS RUN ...")

    args = parser.parse_args()

    # Creates a new connection to DeepGTAV using the specified ip and port. 
    # If desired, a dataset path and compression level can be set to store in memory all the data received in a gziped pickle file.
    client = Client(ip=args.host, port=args.port, datasetPath=args.dataset_path, compressionLevel=9)
    
    # Configures the information that we want DeepGTAV to generate and send to us. 
    # See deepgtav/messages.py to see what options are supported
    dataset = Dataset(rate=5, frame=[320,240], throttle=True, brake=True, steering=True, vehicles=True, peds=True, reward=[15.0, 0.0], direction=None, speed=True, yawRate=True, location=True, time=True)
    # Send the Start request to DeepGTAV.
    #scenario = Scenario(drivingMode=[786603,15.0]) # Driving style is set to normal, with a speed of 15.0 mph. All other scenario options are random.
    scenario = Scenario(drivingMode=[1074528293,40.0])  # Driving style is set to Rushed, with a speed of 150.0 mph. All other scenario options are random.
    #scenario = Scenario(drivingMode=[-1,30.0])  # Driving style is set to Manual, with a speed of 150.0 mph. All other scenario options are random.
    #scenario = Scenario(drivingMode=[6,150.0])  # Avoid Traffic Extremely, with a speed of 200.0 mph. All other scenario options are random.
    client.sendMessage(Start(dataset=dataset,scenario=scenario))

    # Start listening for messages coming from DeepGTAV. We do it for 80 hours
    #stoptime = time.time() + 80*3600
    stoptime = time.time() + 1*60*60
    while time.time() < stoptime:
        try:
            # We receive a message as a Python dictionary
            message = client.recvMessage()  
            print('speed = {} , steering = {}, throttle = {}'.format(message['speed'], message['steering'],message['throttle']))
            if args.image_folder != '':
                # The frame is a numpy array and can be displayed using OpenCV or similar       
                image = frame2numpy(message['frame'], (320,240))
                timestamp = datetime.now().strftime('%Y_%m_%d_%H_%M_%S_%f')[:-3]
                image_name = (timestamp + '.jpg')
                #cv2.imshow('img',image)
                cropped_img = CropImage(image)
                cv2.imwrite("{}/{}.jpg".format(args.image_folder, timestamp), cropped_img)
                steering_list.append(message['steering'])
                throttle_list.append(message['throttle'])
                image_list.append(args.image_folder + '/' + image_name)
            time.sleep(0.2)
        except KeyboardInterrupt:
            break
    test = pd.DataFrame({
        'images': image_list,
        'angles': steering_list,
        'throttle': throttle_list
        })
    test.to_csv('driving_log1.csv')        
    # We tell DeepGTAV to stop
    client.sendMessage(Stop())
    client.close()
